# -*- coding: utf-8 -*-
"""alcubierre_warp_drive.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/LoQiseaking69/Algo_Note_Books/blob/main/DEMO/alcubierre_warp_drive.ipynb

# Comprehensive Study on Alcubierre Warp Drive

This notebook offers a detailed study of the Alcubierre Warp Drive, a theoretical concept in physics proposing faster-than-light travel within the framework of general relativity. We will explore the scientific foundations, mathematical formulations, and the potential implications of this fascinating concept, aiming to provide an in-depth understanding suitable for academic and research purposes.

# Dependencies & Imports
"""

import numpy as np
import plotly.graph_objects as go
from ipywidgets import interact, FloatSlider

"""## Theoretical Background

The Alcubierre Warp Drive is based on Einstein's theory of general relativity. It posits the creation of a warp bubble that distorts spacetime, contracting it in front of the vessel and expanding it behind. This notebook will dissect these concepts, offering a clear insight into the physics underlying the warp drive.

## Mathematical Formulation of the Warp Drive

We delve into the mathematical aspects of the Alcubierre Warp Drive, focusing on the spacetime metric and its implications. This section aims to provide a comprehensive understanding of the theoretical framework that underpins the concept of warp drive.
"""

def alcubierre_metric(warp_factor, x, y, z, ship_radius, sigma):
    """
    Calculate the Alcubierre warp drive metric tensor components.

    Parameters:
    warp_factor (float): The intensity of the warp effect.
    x, y, z (ndarray): Coordinates in the space grid.
    ship_radius (float): The radius of the warp bubble.
    sigma (float): Controls the thickness of the warp bubble's edge.

    Returns:
    ndarray: Calculated warp drive metric tensor components.
    """
    if warp_factor <= 0 or ship_radius <= 0 or sigma <= 0:
        raise ValueError("Warp factor, ship radius, and sigma must be positive.")

    r = np.sqrt(x**2 + y**2 + z**2)
    R = ship_radius
    return warp_factor * (np.tanh(sigma * (r + R)) - np.tanh(sigma * (r - R))) / (2 * np.tanh(sigma * R))

"""## Non-Uniform Grid Generation

This function, `create_non_uniform_grid`, is designed to generate a non-uniform grid. The grid is denser near a specified center point and becomes sparser away from the center. This approach is particularly useful for visualizations where detail is required more in specific areas (like around the warp bubble in our case) while still covering a larger area with less detail.

The function takes the following parameters:
- `center`: The center point around which the grid density is highest.
- `radius`: The radius around the center where the grid density is high.
- `grid_size`: The total size of the grid.
- `density_factor`: Determines how much denser the grid is near the center compared to the outer areas.

The function returns a non-uniform grid that can be used for detailed visualization in specific areas while maintaining overall computational efficiency.
"""

def create_non_uniform_grid(center, radius, grid_size, density_factor):
    """
    Create a non-uniform grid around a center point.

    Parameters:
    center: The center point of interest.
    radius: The radius around the center to have higher density.
    grid_size: The total grid size.
    density_factor: Factor to increase density near the center.

    Returns:
    ndarray: Non-uniform grid.
    """
    linear_space = np.linspace(-10, 10, grid_size)
    high_density_space = np.linspace(-radius, radius, grid_size // density_factor)
    combined_space = np.unique(np.concatenate([linear_space, high_density_space]))
    combined_space.sort()
    return combined_space[combined_space >= -10][combined_space <= 10]

"""## Static Visualization of the Alcubierre Warp Bubble

This cell creates a static 3D visualization of the Alcubierre warp bubble using Plotly. The visualization is based on the metric tensor components calculated by the `alcubierre_metric` function. The warp factor, ship radius, and sigma values are predefined for this static demonstration.

Key steps in this cell include:
- Setting the parameters for the warp bubble.
- Generating a non-uniform grid with higher resolution around the warp bubble using the `create_non_uniform_grid` function.
- Calculating the warp bubble metric using the `alcubierre_metric` function.
- Creating a 3D visualization using Plotly's `Volume` trace to represent the warp bubble in space.

The result is an interactive 3D plot that shows the warp bubble, allowing for examination from different angles and perspectives.
"""

# Function to create a non-uniform grid
def create_non_uniform_grid(min_val, max_val, points, exponent):
    return np.linspace(min_val, max_val, points)**exponent

# Function to calculate the Alcubierre warp bubble metric
def alcubierre_metric(warp_factor, x, y, z, ship_radius, sigma):
    r_s = np.sqrt(x**2 + y**2 + z**2)
    return 1 - np.tanh(sigma * (r_s + ship_radius)) * np.tanh(sigma * (r_s - ship_radius)) * warp_factor

# Warp factor and other parameters for static visualization
warp_factor = 5
ship_radius = 2
sigma = 1

# Reduced number of points in the grid to decrease memory usage
num_points = 50

# Create non-uniform grid
x = create_non_uniform_grid(0, ship_radius, num_points, 2)
y = create_non_uniform_grid(0, ship_radius, num_points, 2)
z = create_non_uniform_grid(0, ship_radius, num_points, 2)
x, y, z = np.meshgrid(x, y, z, indexing='ij')

# Generate the warp bubble metric
metric = alcubierre_metric(warp_factor, x, y, z, ship_radius, sigma)

# Create the 3D Plotly figure
fig = go.Figure(data=go.Volume(
    x=x.flatten(),
    y=y.flatten(),
    z=z.flatten(),
    value=metric.flatten(),
    isomin=0.1,
    isomax=0.9,
    opacity=0.1,
    surface_count=17,
    colorscale='RdBu',
    caps=dict(x_show=False, y_show=False)
))
fig.update_layout(
    title='Alcubierre Warp Bubble',
    scene=dict(
        xaxis_title='X-axis',
        yaxis_title='Y-axis',
        zaxis_title='Z-axis'
    )
)

# Show the figure
fig.show()

fig.write_html("alcubierre_warp_bubble.html")

"""
## Interactive Experimentation

This section provides tools for interactive manipulation of the key variables in the Alcubierre drive equation. Users can adjust these variables to see their impact on the warp bubble and explore the theoretical feasibility of the drive.
"""

# Function to create a non-uniform grid
def create_non_uniform_grid(min_val, max_val, points, exponent):
    return np.linspace(min_val, max_val, points)**exponent

# Function to calculate the Alcubierre warp bubble metric
def alcubierre_metric(warp_factor, x, y, z, ship_radius, sigma):
    r_s = np.sqrt(x**2 + y**2 + z**2)
    return 1 - np.tanh(sigma * (r_s + ship_radius)) * np.tanh(sigma * (r_s - ship_radius)) * warp_factor

def interactive_alcubierre(warp_factor, ship_radius, sigma):
    """
    Create an interactive 3D visualization of the Alcubierre warp bubble.
    """
    # Validate input parameters
    if warp_factor < 0 or ship_radius <= 0 or sigma <= 0:
        raise ValueError("Invalid parameters: Warp factor must be non-negative, ship radius and sigma must be positive.")

    # Reduced grid size for performance
    num_points = 50

    # Create non-uniform grid
    x = create_non_uniform_grid(0, ship_radius, num_points, 2)
    y = create_non_uniform_grid(0, ship_radius, num_points, 2)
    z = create_non_uniform_grid(0, ship_radius, num_points, 2)
    x, y, z = np.meshgrid(x, y, z, indexing='ij')

    # Generate the warp bubble metric
    metric = alcubierre_metric(warp_factor, x, y, z, ship_radius, sigma)

    # Create the 3D Plotly figure
    fig = go.Figure(data=go.Volume(
        x=x.flatten(), y=y.flatten(), z=z.flatten(), value=metric.flatten(),
        isomin=0.1, isomax=0.9, opacity=0.1, surface_count=17, colorscale='RdBu',
        caps=dict(x_show=False, y_show=False)
    ))
    fig.update_layout(
        title='Interactive Alcubierre Warp Bubble',
        scene=dict(xaxis_title='X-axis', yaxis_title='Y-axis', zaxis_title='Z-axis')
    )
    fig.show()

# Display the default render at execution
interactive_alcubierre(5, 2, 1)

# Interactive widgets configuration
interact(interactive_alcubierre,
         warp_factor=FloatSlider(min=0, max=10, step=0.1, value=5, description="Warp Factor"),
         ship_radius=FloatSlider(min=0.1, max=10, step=0.1, value=2, description="Ship Radius"),
         sigma=FloatSlider(min=0.1, max=10, step=0.1, value=1, description="Sigma"))

"""
## Conclusion and Further Research

This notebook has presented a detailed exploration of the Alcubierre Warp Drive, including its theoretical foundations, mathematical model, and interactive experimentation for hypothesis testing. Further research could expand on these concepts, exploring the practical and theoretical challenges in more depth.
"""